//Classe Singleton - só existe um objecto 
public class EscolheCaminho {
	public int[] VetorTapetes=new int[5];//Vetor dos tapetes a usar
	public int[] VetorMaquina=new int[2];//Vetor das maquinas a usar
	public int[] VetorTMaquina=new int[2];//Tempo das maquinas
	//criar Células
	Celula Celula1=new Celula();
	Celula Celula2=new Celula();
	Celula Celula3=new Celula();
	Celula Celula4=new Celula();
	Celula Celula5=new Celula();
	Celula Celula6=new Celula();
	Celula Celula7=new Celula();
	public boolean Robot;//Indica se usa Robot
	//Singleton
	private static EscolheCaminho instance;
	private EscolheCaminho(){}
	
	public static EscolheCaminho getInstance(){
		if(instance==null){
			instance=new EscolheCaminho();	
		}
		return instance;
	}
	//Singleton
	//Escolhe Novo Caminho
	public void EscolheNovoCaminho(char tipo, int PO, int PF){
		if(tipo=='t'){//Se for ordem transforma
			if(Celula1.Disponibilidade()==true){//Verifica disponibilidade célula 1
				for(int i=0;i<=4;i++){
					VetorTapetes[i]=i;
					System.out.println(+VetorTapetes[i]);
				}
				System.out.println("Vetor Máquinas");
				for(int i=0;i<=1;i++){
					VetorMaquina[i]=i;
					System.out.println(+VetorMaquina[i]);
				}
				Celula1.AlteraDisponibilidade();//Altera disponibilidade para ocupado
				System.out.println(Celula1.Disponibilidade());
			}
			else if(Celula2.Disponibilidade()==true){//Verifica disponibilidade célula 1
				for(int i=0;i<=4;i++){
					VetorTapetes[i]=i+4;
					System.out.println(+VetorTapetes[i]);
				}
				Celula1.AlteraDisponibilidade();
				System.out.println(Celula1.Disponibilidade());
			}
			
		}
		
		System.out.println("Vetor Máquinas");
		for(int i=0;i<=1;i++){
			VetorMaquina[i]=i;
			System.out.println(+VetorMaquina[i]);
		}
		System.out.println("Vetor Tempo Máquinas");
		for(int i=0;i<=1;i++){
			VetorTMaquina[i]=i;
			System.out.println(+VetorTMaquina[i]);
		}
		Robot=false;
	};
	
	
}
